using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Runtime.Serialization.Json;
using System.Threading.Tasks;
using GVTCAPI.Models;
using Microsoft.AspNetCore.Mvc;

namespace GVTCAPI.Controllers
{
    [Route("api/[controller]")]
    public class SampleDataController : Controller
    {
        private static readonly HttpClient client = new HttpClient();        
        //private const string githubURL = "https://api.github.com/users/Paxman23l/repos";
        private const string githubURL = "https://api.github.com/users/Paxman23l/starred";

        [HttpGet("[action]")]
        public async Task<JsonResult> GetGitHubInfoAsync(string searchString)
        {
            var result = await ProcessRepos();
            if (!String.IsNullOrWhiteSpace(searchString))
            {
                searchString = searchString.ToLower();
                result = result.Where(x => x.Name.Contains(searchString) || x.Description.Contains(searchString));
            }
            return new JsonResult(result);
        }

        private static async Task<IEnumerable<Repository>> ProcessRepos()
        {
            client.DefaultRequestHeaders.Accept.Clear();
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/vnd.github.v3+json"));
            client.DefaultRequestHeaders.Add("User-Agent", "GvtcAPI");
                        
            var serializer = new DataContractJsonSerializer(typeof(List<Repository>));
            
            var streamTask = client.GetStreamAsync(githubURL);
            var repositories = serializer.ReadObject(await streamTask) as IEnumerable<Repository>;
            repositories = repositories.OrderBy(x => x.Name);
            return repositories;
        }

        #region autogenerated methods
        /// <summary>
        /// Autogenerated Methods
        /// </summary>
        private static string[] Summaries = new[]
        {
            "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
        };

        [HttpGet("[action]")]
        public IEnumerable<WeatherForecast> WeatherForecasts()
        {
            var rng = new Random();
            return Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                DateFormatted = DateTime.Now.AddDays(index).ToString("d"),
                TemperatureC = rng.Next(-20, 55),
                Summary = Summaries[rng.Next(Summaries.Length)]
            });
        }

        public class WeatherForecast
        {
            public string DateFormatted { get; set; }
            public int TemperatureC { get; set; }
            public string Summary { get; set; }

            public int TemperatureF
            {
                get
                {
                    return 32 + (int)(TemperatureC / 0.5556);
                }
            }
        }
        #endregion

    }
}
